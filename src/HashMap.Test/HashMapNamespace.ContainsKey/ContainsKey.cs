// ********RoostGPT********
/*
Test generated by RoostGPT for test roostAI-csharp-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=ContainsKey_ff9ba6f41f
ROOST_METHOD_SIG_HASH=ContainsKey_60b36cd283

   ########## Test-Scenarios ##########  

Scenario 1: Testing with an existing key in the HashMap

Details:
  TestName: TestContainsKeyWithExistingKey
  Description: This test is meant to check the functionality of the ContainsKey method when the provided key is already present in the HashMap.
Execution:
  Arrange: Instantiate the HashMap and add a key-value pair. Decide on the expected outcome(should be true).
  Act: Invoke the ContainsKey method with the previously added key.
  Assert: Compare the return type of the ContainsKey method with the expected outcome.
Validation:
  The assertion checks if ContainsKey correctly identifies that the key is present in the HashMap. The expected result is true as the key was previously added in the arrange step.

Scenario 2: Testing with a key not present in the HashMap

Details:
  TestName: TestContainsKeyWithMissingKey
  Description: This test is supposed to inspect the functionality of the ContainsKey method when the provided key is not currently within the HashMap.
Execution:
  Arrange: Instantiate the HashMap and decide on a key that is not in the HashMap. The expected result here would be false.
  Act: Call the ContainsKey method with the decided key.
  Assert: Compare the ContainsKey method's return value with the expected outcome.
Validation:
  The assertion verifies whether ContainsKey correctly identifies that the key is not present within the HashMap. The expected result is false as the key was not added to the HashMap during the arrange step.

Scenario 3: Testing edge case with an Empty HashMap

Details:
  TestName: TestContainsKeyWithEmptyHashMap
  Description: This test is meant to check the ContainsKey method's behaviour when the HashMap does not contain any key-value pairs.
Execution:
  Arrange: Instantiate an empty HashMap and decide on a random key. The expected outcome here should be false.
  Act: Call the ContainsKey method with the chosen key.
  Assert: Compare the ContainsKey method's return with the expected outcome.
Validation:
  The assertion aims to ensure that the ContainsKey method accurately recognises that the key is not present within the HashMap when the HashMap is empty. The expected result is false, as there are no keys in the HashMap due to being empty.

Scenario 4: Testing with multiple similar keys

Details:
  TestName: TestContainsKeyWithMultipleSimilarKeys
  Description: This test is designed to check the ContainsKey method's behaviour when several key-value pairs with similar keys are present within the HashMap.
Execution:
  Arrange: Instantiate the HashMap and add several key-value pairs with similar keys. Decide on a key that matches the similar keys in the HashMap. The expected outcome should be true.
  Act: Call the ContainsKey method with the chosen key.
  Assert: Compare the return value of the ContainsKey method with the expected outcome.
Validation:
  The assertion checks if the ContainsKey method can accurately detect the presence of the chosen key amongst several similar keys in the HashMap. The expected result is true since a key identical to the chosen key was added to the HashMap in the arrange phase.
*/

// ********RoostGPT********
using NUnit.Framework;
using System.Collections.Generic;

namespace HashMapNamespace.Tests
{
    [TestFixture]
    public class ContainsKeyTest
    {
        private Dictionary<int, int> hashMap;

        [SetUp]
        public void Setup()
        {
            hashMap = new Dictionary<int, int>()
            {
                {1, 1},
                {2, 2},
                {1001, 1001}
            };
        }

        [Test]
        public void TestContainsKeyWithExistingKey()
        {
            bool result = hashMap.ContainsKey(1);
            Assert.IsTrue(result);
        }

        [Test]
        public void TestContainsKeyWithMissingKey()
        {
            bool result = hashMap.ContainsKey(9999);
            Assert.IsFalse(result);
        }

        [Test]
        public void TestContainsKeyWithEmptyHashMap()
        {
            hashMap.Clear();

            bool result = hashMap.ContainsKey(1);
            Assert.IsFalse(result);
        }

        [Test]
        public void TestContainsKeyWithMultipleSimilarKeys()
        {
            bool result = hashMap.ContainsKey(1001);
            Assert.IsTrue(result);
        }

    }
}
