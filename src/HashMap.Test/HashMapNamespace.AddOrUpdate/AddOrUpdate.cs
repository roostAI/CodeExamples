// ********RoostGPT********
/*
Test generated by RoostGPT for test roostAI-csharp-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=AddOrUpdate_e137471c39
ROOST_METHOD_SIG_HASH=AddOrUpdate_c68693ab8d

   ########## Test-Scenarios ##########  

Scenario 1: Test to insert a new key/value pair 

Details:
  TestName: TestAddOrUpdateInsertingNewPair
  Description: This test will verify if the method can successfully insert a new key/value pair into the HashMap.
Execution:
  Arrange: Prepare a key and value pair that is not already in the HashMap.
  Act: Call the AddOrUpdate method with the prepared key/value pair.
  Assert: Check if the return value is True.
Validation: 
  The assertion verifies if a new key/value pair is inserted successfully. The return value should be True, indicating that a new pair has been inserted.

Scenario 2: Test to update an existing pair with same key
  
Details:
  TestName: TestAddOrUpdateUpdatingExistingPair
  Description: This test will verify if the method can successfully update an existing key/value pair in the HashMap.
Execution:
  Arrange: Prepare a key and value pair that is already in the HashMap.
  Act: Call the AddOrUpdate method with the prepared key/value pair.
  Assert: Check if the return value is False.
Validation:
  The assertion verifies if an existing key/value pair with the same key is updated successfully. The return value should be False, indicating that an existing pair was updated and a new pair was not inserted.

Scenario 3: Test to check exception handling when a null value is provided as TValue type parameter

Details:
  TestName: TestAddOrUpdateWithNullValueParameter
  Description: This test will verify if the method correctly throws an exception when trying to insert or update a key/value pair with the value parameter being Null.
Execution:
  Arrange: Prepare a key and a Null value.
  Act: Call the AddOrUpdate method with the prepared key and Null value.
  Assert: Validate if ArgumentNullException is thrown.
Validation:
  The assertion verifies if an ArgumentNullException is thrown when a Null value is tried to be inserted or updated. This is vital to make sure the HashMap integrity is preserved and no Null values are allowed.

Scenario 4: Test to check HashMap resizing when load exceeds

Details:
  TestName: TestAddOrUpdateHashMapResizing
  Description: Test to check if the method correctly resizes the HashMap when the load exceeds a certain limit.
Execution:
  Arrange: Prepare a sequence of key/value pairs that will exceed the current capacity of the HashMap.
  Act: Insert the key/value pairs to the HashMap until the load exceeds and resizing is triggered.
  Assert: Test if the Count and Capacity of the HashMap have changed correctly.
Validation:
  The assertion verifies if the resizing of HashMap was done correctly when the load factor was exceeded. It validates the integrity of the data structure by ensuring it can dynamically adapt its size under heavy loads.
  
Scenario 5: Test to check insertion of duplicate keys with different values

Details:
  TestName: TestAddOrUpdateWithDuplicateKeys
  Description: This test will verify if the method behaves correctly when a duplicate key with different value is being inserted.
Execution:
  Arrange: Prepare a key value pair with a key that already exists in the HashMap but with a different value.
  Act: Call the AddOrUpdate method with the prepared key/value pair.
  Assert: Check if the return value is False and HashMap has updated the value for the mentioned key.
Validation:
  The assertion verifies if a new value for an existing key is updated properly. The expected outcome should showcase that the HashMap has updated the value for the mentioned key. The return value should be False, indicating that the pair was updated, not inserted.
*/

// ********RoostGPT********
using System;
using NUnit.Framework;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class AddOrUpdateTest
    {
        private HashMap64<string> _hashMap;

        [SetUp]
        public void Setup()
        {
            _hashMap = new HashMap64<string>();
        }

        [Test]
        public void TestAddOrUpdateInsertingNewPair()
        {
            bool result = _hashMap.AddOrUpdate(100, "value");
            Assert.IsTrue(result);
        }
        
        [Test]
        public void TestAddOrUpdateUpdatingExistingPair()
        {
            _hashMap.AddOrUpdate(100, "value");
            string oldValue;
            bool result = _hashMap.AddOrUpdate(100, "updated", out oldValue);
            Assert.IsTrue(result);
            Assert.AreEqual(oldValue, "value");
        }
        
        [Test]
        public void TestAddOrUpdateWithNullValueParameter()
        {
            Assert.Throws<ArgumentNullException>(() => _hashMap.AddOrUpdate(1000, null));
        }
        
        [Test]
        public void TestAddOrUpdateHashMapResizing()
        {
            for (long i = 0; i < 1000; i++)
            {
                _hashMap.AddOrUpdate(i, $"value{i}");
            }

            Assert.Greater(_hashMap.Capacity, 944);
            Assert.AreEqual(_hashMap.Count, 1000);
        }

        [Test]
        public void TestAddOrUpdateWithDuplicateKeys()
        {
            _hashMap.AddOrUpdate(1, "value");
            string oldValue;
            bool result = _hashMap.AddOrUpdate(1, "updated", out oldValue);
            Assert.IsTrue(result);
            Assert.AreEqual(oldValue, "value");
        }
    }
}
