// ********RoostGPT********
/*
Test generated by RoostGPT for test roostAI-csharp-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=ToString_f14ba6d942
ROOST_METHOD_SIG_HASH=ToString_c887d19c50

   ########## Test-Scenarios ##########  

Scenario 1: Test ToString method with expected output

  Details:
    TestName: ToStringReturnsCorrectFormat.
    Description: This test is meant to check whether the overridden ToString() method returns the correct value in a predefined format.

  Execution:
    Arrange: Instantiate an instance of the HashMap64 class and insert valid keys, values.
    Act: Call the ToString method on one node instance in the HashMap.
    Assert: Check that the key, value, and next are being output in the correct format.

  Validation:
    The assertion checks whether the output format and values are correct in ToString() method of the HashMap64Node. This will ensure the validity of the format in the ToString() implementation.

Scenario 2: ToString method using default values of key and value

  Details:
    TestName: ToStringWithDefaultValues.
    Description: This test is to verify what the output of the ToString method is when the values of key and value in the node are default or empty. 

  Execution:
    Arrange: Instantiate an instance of the HashMap64 class and create a node without inserting any key, value.
    Act: Call the ToString method of a default node.
    Assert: Check that the default values for key, value, and next are being output in the correct format.

  Validation:
    The assertion aims to verify if the ToString method correctly handles the case when the key, value, are default or empty. This also verifies that ToString doesn't break, crash, or throw exceptions while dealing with empty/default values.

Scenario 3: ToString method when next is not empty

  Details:
    TestName: ToStringWhenNextIsNotEmpty.
    Description: This test checks the scenario where the next pointer of the node is not empty while calling the ToString method.

  Execution:
    Arrange: Instantiate an instance of the HashMap64, add multiple key-value pairs to it such that the next pointer of a node is not empty.
    Act: Call the ToString method on that node.
    Assert: Check that the key, value, and next are being output in the correct format.

  Validation:
    The assertion is to validate if the ToString method correctly considers the non-empty next pointer and represents it accurately in the output string. This is crucial for understanding the next pointer reference in string format.
*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using HashMapNamespace;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class ToStringTest
    {
        [Test]
        public void ToStringReturnsCorrectFormat()
        {
            // Arrange
            var hashmap = new HashMap<int, string>();
            hashmap.Add(1, "a");
            hashmap.Add(2, "b");
            hashmap.Add(3, "c");

            // Act
            var result = hashmap.ToString();

            // Assert
            Assert.AreEqual("{1=a, 2=b, 3=c}", result);
        }

        [Test]
        public void ToStringWithDefaultValues()
        {
            // Arrange
            var hashmap = new HashMap<int, string>();

            // Act
            var result = hashmap.ToString();

            // Assert
            Assert.AreEqual("{}", result);
        }

        [Test]
        public void ToStringWhenNextIsNotEmpty()
        {
            // Arrange
            var hashmap = new HashMap<int, string>();
            hashmap.Add(1, "a");
            hashmap.Add(2, "b");
            hashmap.Add(3, "c");

            // Act
            var result = hashmap.ToString();

            // Assert
            Assert.IsTrue(result.Contains("="));
        }
    }
}
