// ********RoostGPT********
/*
Test generated by RoostGPT for test roostAI-csharp-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=Add_8864c1947d
ROOST_METHOD_SIG_HASH=Add_70cf5332c9

   ########## Test-Scenarios ##########  

Scenario 1: Add Key-Value Pair to Empty HashMap64
Details:
  TestName: TestAddKeyValuePairToEmptyHashMap
  Description: This test will verify that a key-value pair is successfully added to an empty HashMap64 object.
Execution:
  Arrange: Instantiate a HashMap64 object with no entries.
  Act: Add a key-value pair using the Add() method.
  Assert: Confirm that the size of the hash map has increased by 1 after the method call.
Validation:
  The assertion will ensure that the method has properly added the key-value pair to the container. Adding a pair to an empty HashMap64 is one of the simplest use cases.

Scenario 2: Adding Key-Value Pair to Non-empty HashMap64
Details:
  TestName: TestAddKeyValuePairToNonEmptyHashMap
  Description: This test will verify that a new key-value pair is correctly added to a non-empty HashMap64 object.
Execution:
  Arrange: Create a HashMap64 object and prepopulate it with known key-value pairs.
  Act: Add a new, distinct key-value pair using the Add() method.
  Assert: Confirm the size of the hash map has increased by 1 and the new pair exists in the map.
Validation:
  This test demonstrates regular use of the Add() method, showing it correctly handles and stores data in a standard scenario.

Scenario 3: Adding Key-Value Pair With Duplicate Key
Details:
  TestName: TestAddKeyValuePairWithDuplicateKey
  Description: This test will check the behavior of Add() method when a second key-value pair with the same key as a pre-existing pair is added.
Execution:
  Arrange: Create an instance of HashMap64 and add a known key-value pair to it.
  Act: Call the Add() method and try to add a second pair using the same key.
  Assert: Confirm that ArgumentException is thrown.
Validation:
  The test shows that the Add() method correctly enforces the rule that all keys must be unique. The ArgumentException thrown here indicates that the mechanism for preventing duplicate keys works as intended.

Scenario 4: Add Method Performance Test With Large Amount of Data
Details:
  TestName: TestAddMethodPerformanceWithLargeData
  Description: This test will investigate how the Add() method performs when adding a large number of key-value pairs.
Execution:
  Arrange: Instantiate an empty HashMap64 object.
  Act: Add a large number of unique key-value pairs in a loop.
  Assert: Confirm all key-value pairs have been added successfully and the size of the HashMap64 matches the number of pairs added.
Validation:
  This test shows the capability of the Add() method to handle a large amount of data, which is a critical requirement in many applications. Therefore, this test is important for testing the robustness and reliability of the method.

Scenario 5: Adding Null Value to the HashMap64
Details:
  TestName: TestAddNullValueToHashMap
  Description: This test will verify if the Add() method can handle a null value.
Execution:
  Arrange: Create an empty instance of HashMap64.
  Act: Add a key-value pair, where the value is null.
  Assert: Confirm the pair is added and the size of the HashMap64 increased by 1.
Validation:
  This test is designed to ensure the method can handle cases when a null value is passed to it. It's significant because it tests the null-handling capability of the method.
*/

// ********RoostGPT********
using NUnit.Framework;
using HashMapNamespace;
using System;

namespace HashMapNamespace.Tests
{
    [TestFixture]
    public class AddTest
    {
        [Test]
        public void TestAddKeyValuePairToEmptyHashMap()
        {
            // Arrange
            var hashMap = new HashMap64<string>();

            // Act
            hashMap.Add(1, "Test");

            // Assert
            Assert.AreEqual(1, hashMap.Count);
        }

        [Test]
        public void TestAddKeyValuePairToNonEmptyHashMap()
        {
            // Arrange
            var hashMap = new HashMap64<string>();
            hashMap.Add(1, "Test1");

            // Act
            hashMap.Add(2, "Test2");

            // Assert
            Assert.AreEqual(2, hashMap.Count);
            Assert.AreEqual("Test2", hashMap[2]);
        }

        [Test]
        public void TestAddKeyValuePairWithDuplicateKey()
        {
            // Arrange
            var hashMap = new HashMap64<string>();
            hashMap.Add(1, "Test1");

            // Act & Assert
            Assert.Throws<ArgumentException>(() => hashMap.Add(1, "Test2"));
        }

        [Test]
        public void TestAddMethodPerformanceWithLargeData()
        {
            // Arrange
            var hashMap = new HashMap64<int>();
            int largeNumber = 5000;

            // Act
            for (int i = 0; i < largeNumber; i++)
            {
                hashMap.Add(i, i);
            }

            // Assert
            Assert.AreEqual(largeNumber, hashMap.Count);
        }

        [Test]
        public void TestAddNullValueToHashMap()
        {
            // Arrange
            var hashMap = new HashMap64<string>();
            
            // Act
            hashMap.Add(1, null);

            // Assert
            Assert.AreEqual(1, hashMap.Count);
            Assert.IsNull(hashMap[1]);
        }
    }
}
