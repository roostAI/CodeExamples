// ********RoostGPT********
/*
Test generated by RoostGPT for test roostAI-csharp-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=Remove_06c9d71aeb
ROOST_METHOD_SIG_HASH=Remove_62d82e76b6

   ########## Test-Scenarios ##########  

Scenario 1: Successful removal of key
  Details:
    TestName: TestRemoveKeySuccess.
    Description: This test checks if the method successfully removes a key that exists in the HashMap.
  Execution:
    Arrange: Initialize the HashMap with a known key-value pair.
    Act: Call the 'Remove' method with the known key.
    Assert: Assert that the function returns true and that the Count of HashMap is decreased by 1.
  Validation:
    This test is meant to verify that removal is successful when a valid key is passed to this method. If the method behaves as expected, the key should be removed and true should be returned.
    
Scenario 2: Unsuccessful removal of non-existing key
  Details:
    TestName: TestRemoveNonExistingKey.
    Description: This test checks if the method behaves appropriately when trying to remove a non-existing key.
  Execution:
    Arrange: Initialize the HashMap without a specific key.
    Act: Call the 'Remove' method with the specified key.
    Assert: Assert that the function returns false and that the Count of HashMap remains unchanged.
  Validation:
    This test is meant to verify that the method correctly identifies when a key does not exist in the HashMap and returns false.

Scenario 3: Successful removal of key in collision
  Details:
    TestName: TestRemoveKeyInCollision.
    Description: This test checks if the method successfully removes a key that exists in a bucket with collision.
  Execution:
    Arrange: Initialize the HashMap with known key-value pairs that cause collision.
    Act: Call the 'Remove' method with a known key that is part of the collision.
    Assert: Assert that the function returns true and that the Count of HashMap is decreased by 1.
  Validation:
    This test is meant to verify that the method successfully deals with hash collision and can remove keys correctly in this scenario.

Scenario 4: Error handling when HashMap is empty
  Details:
    TestName: TestRemoveKeyFromEmptyMap.
    Description: This test tests error handling by trying to remove a key from an empty HashMap.
  Execution:
    Arrange: Initialize an empty HashMap.
    Act: Call the 'Remove' method with any key.
    Assert: Assert that the function returns false.
  Validation:
    This test is meant to verify that the method correctly identifies the lack of elements in the HashMap and does not result in an error.

Scenario 5: Successful removal of key from full capacity HashMap
  Details:
    TestName: TestRemoveKeyFullCapacity.
    Description: This test checks if the method can successfully remove a key from a HashMap at full capacity.
  Execution:
    Arrange: Initialize the HashMap to its full capacity.
    Act: Call the 'Remove' method with a known key.
    Assert: Assert that the function returns true and that the Count of HashMap is decreased by 1.
  Validation:
    This test is meant to verify that the method can successfully manage memory and remove keys efficiently even at maximum HashMap capacity.
*/

// ********RoostGPT********
using System;
using System.Collections.Generic;
using NUnit.Framework;
using Moq;
using HashMapNamespace;

namespace HashMapNamespace.Test
{
    [TestFixture]
    public class RemoveTest
    {
        [Test]
        public void TestRemoveKeySuccess()
        {
            // Arrange
            var hashMap = new HashMap64<string>(100);
            hashMap.Add(22, "Value22");
			
            //Act
            bool res = hashMap.Remove(22);
            
            //Assert
            Assert.That(res, Is.True);
            Assert.That(hashMap.Count, Is.EqualTo(0));
        }

        [Test]
        public void TestRemoveNonExistingKey()
        {
            //Arrange
            var hashMap = new HashMap64<string>(100);
			
            //Act
            bool res = hashMap.Remove(22);
            
            //Assert
            Assert.That(res, Is.False);
            Assert.That(hashMap.Count, Is.EqualTo(0));
        }

        [Test]
        public void TestRemoveKeyInCollision()
        {
            //Arrange
            var hashMap = new HashMap64<string>(2); // Force collision
            hashMap.Add(1, "Value1");
            hashMap.Add(2, "Value2");
			
            // Act
            bool res = hashMap.Remove(1);
            
            //Assert
            Assert.That(res, Is.True);
            Assert.That(hashMap.Count, Is.EqualTo(1));
        }

        [Test]
        public void TestRemoveKeyFromEmptyMap()
        {
            //Arrange
            var hashMap = new HashMap64<string>();
			
            //Act
            bool res = hashMap.Remove(100);

            //Assert
            Assert.That(res, Is.False);
        }

        [Test]
        public void TestRemoveKeyFullCapacity()
        {
            //Arrange
            var hashMap = new HashMap64<string>(1);
            hashMap.Add(512, "Value512");

            //Act
            bool res = hashMap.Remove(512);

            //Assert
            Assert.That(res, Is.True);
            Assert.That(hashMap.Count, Is.EqualTo(0));
        }
    }
}
