// ********RoostGPT********
/*
Test generated by RoostGPT for test roostAI-csharp-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=typeof_2d12bfcaed
ROOST_METHOD_SIG_HASH=typeof_56d1dea17d

   ########## Test-Scenarios ##########  

Scenario 1: Test Valid Service Registration
  Details:
    TestName: Should_Register_ValidServiceSuccessfully.
    Description: This test aims to validate if the service provided as a parameter gets added to the internal services dictionary correctly.
  Execution:
    Arrange: Create an instance of TestService and SimpleServiceLocator.
    Act: Call the Register method on the instance of SimpleServiceLocator with TestService as the parameter.
    Assert: Verify that the service is added to the services dictionary of SimpleServiceLocator instance.
  Validation:
    This will confirm that a valid service is added correctly to the dictionary of services. In also indicates that the Register method is functioning correctly as per business requirement when the valid input is provided.

Scenario 2: Test Service Overwriting Scenario 
  Details:
    TestName: Should_Overwrite_ExistingServiceWhenSameTypeRegisteredAgain.
    Description: This test verifies if registering a service of existing type overwrites the previous service in the internal services dictionary.
  Execution:
    Arrange: Create two instances of TestService & SimpleServiceLocator.
    Act: Call the Register method twice on SimpleServiceLocator instance - first with one instance of TestService and then with another.
    Assert: Verify that the final service for the type in the services dictionary is the one registered last.
  Validation:
    This helps to confirm the data integrity and overwrite functionality whenever a new service of already existing type is registered.

Scenario 3: Test Null Service Registration
  Details:
    TestName: Should_ThrowError_WhenNullServiceRegistered.
    Description: The test checks for potential error scenario if a null service is tried to register.
  Execution:
    Arrange: Create an instance of SimpleServiceLocator.
    Act: Call the Register method on the instance of SimpleServiceLocator with null as parameter.
    Assert: Verify that the appropriate exception/error is thrown.
  Validation:
    This ensures robust error handling when the null service is being registered, protecting system stability. 

Scenario 4: Test Different Services Registration
  Details:
    TestName: Should_Register_DifferentServicesWithNoOverwrite.
    Description: This test verifies that registering multiple different services does not overwrite previously added services of different types.
  Execution:
    Arrange: Create instances of TestService, AnotherService (if available) & SimpleServiceLocator.
    Act: Call the Register method on SimpleServiceLocator instance with TestService & AnotherService as parameters.
    Assert: Verify that both services exist in the services dictionary without being overwritten.
  Validation: 
    Validates the functionality accommodates the simultaneous access of multiple different services as per business requirements.

*/

// ********RoostGPT********
using CommonServiceLocator;
using NUnit.Framework;
using SimpleConsoleApp;
using Moq;
using System;

// Use correct namespaces for 'IService' and 'IAnotherService' if they belong to another namespace.
//using CorrectNamespaceForIService;
//using CorrectNamespaceForIAnotherService;

namespace SimpleConsoleApp.Test
{
    public class SimpleServiceLocatorTests : SimpleServiceLocator
    {
        private SimpleServiceLocator simpleServiceLocatorUnderTest;

        [SetUp]
        public void SetUp()
        {
            simpleServiceLocatorUnderTest = new SimpleServiceLocator();
        }

        [Test]
        public void Should_Register_ValidServiceSuccessfully()
        {
            // Arrange
            var service = new Moq.Mock<IService>();

            // Act
            simpleServiceLocatorUnderTest.Register(service.Object);

            // Assert
            Assert.AreEqual(service.Object, simpleServiceLocatorUnderTest.GetInstance<IService>());
        }

        [Test]
        public void Should_Overwrite_ExistingServiceWhenSameTypeRegisteredAgain() 
        {
            // Arrange
            var service1 = new Moq.Mock<IService>();
            var service2 = new Moq.Mock<IService>();

            // Act
            simpleServiceLocatorUnderTest.Register(service1.Object);
            simpleServiceLocatorUnderTest.Register(service2.Object);

            // Assert
            Assert.AreEqual(service2.Object, simpleServiceLocatorUnderTest.GetInstance<IService>());
        }

        [Test]
        public void Should_ThrowError_WhenNullServiceRegistered() 
        {
            // Arrange
            IService service = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => simpleServiceLocatorUnderTest.Register(service));
        }

        [Test]
        public void Should_Register_DifferentServicesWithNoOverwrite() 
        {
            // Arrange
            var testService = new Moq.Mock<IService>();
            var anotherService = new Moq.Mock<IAnotherService>();

            // Act
            simpleServiceLocatorUnderTest.Register(testService.Object);
            simpleServiceLocatorUnderTest.Register(anotherService.Object);

            // Assert
            Assert.AreEqual(testService.Object, simpleServiceLocatorUnderTest.GetInstance<IService>());
            Assert.AreEqual(anotherService.Object, simpleServiceLocatorUnderTest.GetInstance<IAnotherService>());
        }
    } 
}
